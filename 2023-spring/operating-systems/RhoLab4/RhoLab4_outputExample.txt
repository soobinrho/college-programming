DEADLOCK DETECTION ALGORITHM
Input Example:
  a<Z
  a>X
  b<X

* Note that the left hand side is a thread. It only accepts [a-z].
  Likewise, the right hand side is a resource. It only accepts [A-Z].
  As per the operator, it should either be < or >.
* To exit, enter the EOF character. (Ctrl+D if you're on Linux.)

Enter: 


[INFO] Traversing through every node of the resource tree...
SUBTREE[0] | Node R | Node a | Node S |
SUBTREE[1] | Node T | Node e | Node V | Node g | Node U | Node d | Node T 


// ==================
// [RESULT] wholeTree
// ==================
wholeTree[ID]->ID = a | ->forward = S 
wholeTree[ID]->ID = b | ->forward = T 
wholeTree[ID]->ID = c | ->forward = S 
wholeTree[ID]->ID = d | ->forward = S T 
wholeTree[ID]->ID = e | ->forward = V 
wholeTree[ID]->ID = f | ->forward = S 
wholeTree[ID]->ID = g | ->forward = U 
wholeTree[ID]->ID = R | ->forward = a 
wholeTree[ID]->ID = S | ->forward = 
wholeTree[ID]->ID = T | ->forward = e 
wholeTree[ID]->ID = U | ->forward = d 
wholeTree[ID]->ID = V | ->forward = g 
wholeTree[ID]->ID = W | ->forward = f 

[RESULT] traverseList = T e V g U d T 
[RESULT] A deadlock has been detected.
